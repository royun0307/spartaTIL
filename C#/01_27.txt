01. 자료형
 기본적인 자료형들은 c++과 비슷하나 양수를 나타내는 unsinged가 u로 단축됨

02. 입출력
 입력의 경우에는 Console.ReadLine()을 통해 받는다. 특이사항으로는 리턴값이 항상 string이다.
 출력의 경우에 Console.WriteLine()을 통해서 출력한다. 줄바꿈이 없는 출력은 Console.Write()이다. printf()의 사용법과 비슷하다.

03. var 키워드
 var의 경우에는 파이썬과 같이 값이 정해질 때 자료형이 정해진다.

04. 연산자 우선순위
 1. 괄호 (): 괄호로 감싸진 부분은 가장 높은 우선순위로 먼저 계산됩니다.
 2. 단항 연산자: 단항 연산자들(++, --, +, -, ! 등)
 3. 산술 연산자: 산술 연산자들(*, /, %, +, -)
 4. 시프트 연산자: 시프트 연산자(<<, >>)
 5. 관계 연산자: 관계 연산자들(<, >, <=, >=, ==, !=)
 6. 논리 연산자: 논리 연산자들(&&, ||)
 7. 할당 연산자: 할당 연산자들(=, +=, -=, *=, /= 등)

 05. 자료구조
  List : Linked List기반으로 인덱스기반의 탐색이 배열보다 오래 걸린다.
  Dictionary : 키와 값으로 이루어진 데이터 구조이다. 키를 통해 탐색할 수 있다.
  Stack : LIFO
  Queue : FIFO, c++와는 다르게 삽입은 queue.Enqueque(), 삭제는 queue.Dequeue()를 사용한다.
  HashSet : 해싱을 이용한 set이다.
