Mathf.PingPong
  -정의
    Mathf.PingPong(float t, float length) 는 0부터 length 사이를 반복하여 왕복하는 값을 반환하는 함수이다. 
    시간(t)이 지날수록 0 → length → 0 → length... 와 같이 계속 반복하기 때문에 주로 “왕복 이동” 혹은 “반복적인 패턴” 에 사용된다.
  
  -궁금점
    Mathf.PingPong()을 통해 물체를 일정한 속도로 이동시켰는데, Vector3.MoveTowards()와의 차이점은 무엇인가?
  
  -해답
    Vector3.MoveTowards()는 목적지까지 일정한 간격마다 조금씩 가까워지는 함수이다.
    보통 목표위치까지의 직선이동을 구현하기 위해 사용한다.

    구분	                                  Mathf.PingPong	                                                    Vector3.MoveTowards
    동작 방식              	 0~length 사이를 왕복하는 값을 반환 (반복적인 패턴)                        	현재 위치에서 목표 위치로 일정 거리만큼 점진적 이동
    
    주요 특징	               - 왕복(반복) 모션에 적합<br/> - 주로 1차원 스칼라 값을 활용	                 - 직선 목표 지향 이동에 적합,3D 공간에서 원하는 목표점으로 이동
    
    예시 사용 시나리오	       - 적 캐릭터가 일정 구간을 계속 순찰하는 움직임                               -  플레이어나 적이 플레이어를 향해 다가갈 때
                               - UI 이펙트에서 크기가 주기적으로 커졌다/작아졌다 하는 효과                - 자동문이 목표 지점까지 서서히 열리는 연출 등
                               
    단점 혹은 주의	         - 원하는 타이밍에 멈추기 어렵고 계속 반복됨                                 - 목표 위치가 계속 바뀌면 추적 로직을 별도로 세팅해야 함
                             - 이동 반경이 고정된 왕복 형태에만 사용 가능	                               - 목표점을 벗어나서 추가 이동하는 왕복 패턴을 직접 구현하려면 별도 로직 필요

  -결론
    Mathf.PingPong 은 시간에 따라 값이 자동으로 0과 특정 범위를 왕복하므로, “반복 왕복” 이 필요한 상황에서 매우 간단히 구현할 수 있습니다. 예를 들어, 빛의 밝기, 색상 변화, UI 스케일, 몬스터 순찰 루틴 등 주기적으로 되풀이되는 동작에 적합합니다.
    Vector3.MoveTowards 는 “현재 위치에서 목표 위치”로 이동하는 것을 자연스럽게 처리할 수 있어, 일반적인 캐릭터 이동, NPC 추적, 자동문 열림/닫힘, 카메라 위치 이동 등 목표 지향적 이동 로직에 자주 쓰입니다.


  코딩 중 의문
    lastBlock.x = middle로 직접 접근하지 않고,
    Vector3 tempPosition = lastBlock.localPosition;
    tempPosition.x = middle;
    lastBlock.localPosition = lastPosition = tempPosition;
    간접적으로 접근하는 이유는?
    Unity에서는 Transform에 있는 localPosition 같은 프로퍼티는 다음과 같은 제한이 있:
      C#에서는 구조체를 반환하는 프로퍼티의 멤버(예: someStruct.x)를 직접 수정하려 하면 에러가 난다.
      이 에러 메시지는 보통 “Cannot modify the return value of ‘property’ because it is not a variable” 같은 식으로 표시된다.
      즉, 구조체 자체를 새로 만들어서 할당해야 한다.
