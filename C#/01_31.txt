1. 메서드
  - 메서드란?
      - 메서드(Method)는 일련의 코드 블록으로, 특정한 작업을 수행하기 위해 사용되는 독립적인 기능 단위입니다.
  -메서드와 함수의 차이 : 
    항목	        함수 (Function)	                        메서드 (Method)
    정의           위치	                              독립적으로 존재할 수 없음	클래스 또는 구조체 내부
    객체 의존성	   없음 (static으로 구현)	            있음 (인스턴스 필요)
    호출 방식	     ClassName.Method()	                object.Method()
    예시	         Math.Sqrt(4)	                      str.ToUpper()
    상태(데이터)    접근	                              불가능	가능 (this 사용 가능)

   C#에서는 독립적인 함수를 따로 정의할 수 없지만, static을 사용하여 클래스의 속하지만 특정 인스턴스에 의존하지 않는 함수처럼 동작하는 메서드를 만들 수 있다.

2. 객체지향 프로그래밍(Object-Oriented Programming, OOP)의 특징
  -캡슐화 (Encapsulation):
        - 관련된 데이터와 기능을 하나의 단위로 묶는 것을 의미합니다.
        - 캡슐화하여 정보를 은닉하고, 안정성과 유지보수성을 높입니다.
  -상속 (Inheritance):
        - 상속은 기존의 클래스를 확장하여 새로운 클래스를 만드는 메커니즘입니다.
        - 코드의 중복을 줄이고,코드의 구조화와 유지보수를 용이하게 합니다.
  -다형성 (Polymorphism):
        - 다형성은 하나의 인터페이스나 기능을 다양한 방식으로 구현하거나 사용할 수 있는 능력을 의미합니다.
        - 코드의 가독성과 재사용성을 높입니다.
  -추상화 (Abstraction):
        - 추상화는 복잡한 시스템이나 개념을 단순화하여 필요한 기능에 집중하는 것을 의미합니다.
        - 클래스나 인터페이스를 사용하여 실제 세계의 개념을 모델링하고, 필요한 부분에 대한 명세를 정의합니다.
        - 코드의 이해와 유지보수를 용이하게 합니다.
  -객체 (Object):
        - 객체는 클래스로부터 생성된 실체로, 데이터와 해당 데이터를 조작하는 메서드를 가지고 있습니다.
        - 객체는 상태(데이터)와 행동(메서드)을 가지며, 실제 세계의 개체나 개념을 모델링합니다.
        - 모듈화와 재사용성을 높입니다.

3. 프로퍼티란?
  - 프로퍼티는 클래스 멤버로서, 객체의 필드 값을 읽거나 설정하는데 사용되는 접근자(Accessor) 메서드의 조합입니다.
  - 객체의 필드에 직접 접근하지 않고, 간접적으로 값을 설정하거나 읽을 수 있도록 합니다.
  - get,set을 이용하여 데이터애 접근이 가능하도록 한다.
4. 추상(Abstract)클래스와 메서드
  - 주로 상속을 위한 베이스 클래스로 사용됩니다. 
  - 추상 메서드는 구현부가 없는 메서드로, 자식 클래스에서 반드시 구현되어야 합니다.
