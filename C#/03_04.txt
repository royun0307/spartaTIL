1. Coroutine
    Coroutine은 작업을 다수의 프레임에 분산하는 메서드이다. Unity에서 코루틴은 실행을 일시 정지하고 제어를 Unity에 반환하지만 중단한 부분에서 다음 프레임을 계속할 수 있는 메서드이다.
    하지만 코루틴은 스레드가 아니라는 점을 명심해야 한. 코루틴의 동기 작업은 여전히 메인 스레드에서 실행된다.
    이부분에서 컴퓨터가 하나의 쓰레드로도 멀티작업을 수행할 수 있는 방법인 Time Slicing과 Context Switching과의 차이점이 궁금했다.
      시분할 방식(Time Slicing):
        CPU는 매우 짧은 시간 단위(예: 수 밀리초)로 각 작업(프로세스 또는 스레드)에 실행 시간을 할당한다. 
        이렇게 빠르게 작업 간 전환이 이루어지면, 사용자는 마치 여러 작업이 동시에 실행되는 것처럼 느끼게 된다.

      문맥 전환(Context Switching):
        OS는 현재 실행 중인 작업의 상태(레지스터 값, 프로그램 카운터 등)를 저장하고, 다음 작업의 상태를 복원하는 과정을 통해 작업을 전환한다.
        이 과정을 통해 하나의 스레드라도 여러 작업을 빠르게 번갈아가며 실행할 수 있디.

    다음은 OS의 시분할 멀티 태스킹과 유니티 코루틴의 차이점이다.
      1. 스케줄링 방식
        시분할/문맥 전환:
            운영체제는 하드웨어 타이머와 인터럽트를 이용하여 작업을 강제로 전환(Preemption)한다. CPU는 매우 짧은 시간 단위로 각 작업을 실행하며, 
            사용자는 이를 동시에 실행되는 것처럼 인식한다.
        유니티 코루틴:
            코루틴은 개발자가 명시적으로 yield 구문을 사용하여 실행 흐름을 일시 중단하고, 이후 특정 조건(예: 다음 프레임, 일정 시간 후, 특정 이벤트 발생 등)이 충족되면 재개한다. 
            이는 협력적 방식으로, 개발자가 언제 실행을 넘길지 결정한다.
      2. 실행 환경
        시분할/문맥 전환:
          OS 커널 레벨에서 동작하며, 다수의 프로세스나 스레드를 대상으로 CPU 시간을 분배한다.
        유니티 코루틴:
          Unity 엔진 내의 메인 스레드에서 실행되며, 별도의 스레드를 생성하지 않고 비동기적 작업을 쉽게 구현할 수 있도록 도와준다.
      3. 동시성 vs. 비동기성
        시분할 멀티태스킹:
          실제로 여러 프로세스가 번갈아가며 실행되어 사용자는 동시 실행하는 것처럼 보인다(단, 하나의 코어에서는 한 번에 한 작업만 실행).
        유니티 코루틴:
          하나의 스레드 내에서 순차적으로 실행되지만, yield를 통해 긴 작업을 여러 프레임에 걸쳐 나눠 처리할 수 있어 게임의 프레임 드랍 없이 작업을 분산시킬 수 있다.

2. 스카이 박스
  게임 세계의 배경을 둘러싸는 환경 매핑 기술이다. 주로 다음과 같은 특징을 가진다.
    배경 렌더링: 
      스카이박스는 씬의 무한한 배경처럼 보이도록 하여, 플레이어가 보는 모든 방향에 일관된 하늘이나 풍경을 제공한다.
    텍스처 적용: 
      보통 6면체 큐브맵(cubemap)이나 구체형 스카이박스(Sphere Map) 를 사용하여, 하늘, 구름, 별, 산맥 등의 배경을 자연스럽게 표현한다.
    환경 효과:
      스카이박스는 조명과 반사에도 영향을 미치므로, 게임의 분위기와 몰입감을 높여주며, 전체적인 씬의 조명 효과를 개선하는 데 도움을 준다.
    설정 위치: 
      유니티의 Lighting Settings나 Render Settings에서 스카이박스를 설정할 수 있으며, 필요에 따라 커스터마이징도 가능하다.

3. TryGetComponent
  TryGetComponent는 Unity에서 사용하는 메서드로, 게임 오브젝트의 컴포넌트를 가져오는 기능을 제공한다.(GetComponet와 유사) 
  이 메서드를 사용하면 특정 컴포넌트가 게임 오브젝트에 연결되어 있는지 확인하고, 연결되어 있다면 해당 컴포넌트를 가져올 수 있다.
  public bool TryGetComponent<T>(out T component) where T : Component;
  타입이 T인 컴포넌트가 존재한다면, true , 없다면, false를 리턴한다.
  component 를 통해 컴포넌트를 가져올 수 있다.
